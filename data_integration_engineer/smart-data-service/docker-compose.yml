version: '3.8'

services:
  rabbitmq:
    container_name: smart-data-service-rabbitmq
    image: rabbitmq:3.8-management-alpine
    ports:
      # The standard AMQP protocol port
      - 5672:5672
      # HTTP management UI
      - 15672:15672
    volumes:
      - ./rabbitmq/rabbitmq.config:/etc/rabbitmq/rabbitmq.config:ro
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 10
    networks:
      - network

  postgres-db:
    container_name: smart-data-service-postgres
    image: postgres:12.7-alpine
    healthcheck:
      test: pg_isready --host postgres-db -U postgres || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - 8080:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: smart_data
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - network

  smart-data-service-administrator:
    container_name: smart-data-service-administrator
    build:
      context: ./
      dockerfile: docker/administrator/Dockerfile
    tty: true
    restart: on-failure
    environment:
      RABBIT_MQ_HOST: rabbitmq
      RABBIT_MQ_PORT: 5672
      RABBIT_MQ_USER: admin
      RABBIT_MQ_PASS: admin
      POSTGRES_HOST: postgres-db
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DATABASE: smart_data
    depends_on:
      - rabbitmq
      - postgres-db
    networks:
      - network

  smart-data-service-api:
    container_name: smart-data-service-api
    build:
      context: ./
      dockerfile: docker/api/Dockerfile
    restart: on-failure
    environment:
      POSTGRES_HOST: postgres-db
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DATABASE: smart_data
      FLASK_APP: src/smart_data_service/rest_api.py
      API_PORT: 5000
    ports:
      - 5000:5000
    depends_on:
      - postgres-db
    networks:
      - network
    healthcheck:
      test: curl -f http://localhost:5000/.rest/status || exit 1
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  # Declare private network with default settings.
  network: {}